//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Articy.Test;
using Articy.Unity;
using Articy.Unity.Interfaces;
using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;


namespace Articy.Test.Features
{
    
    
    [Serializable()]
    public class PhraseFeatureFeature : IArticyBaseObject, IPropertyProvider
    {
        
        [SerializeField()]
        private String mid;
        
        [SerializeField()]
        private ArticyValueArticyObject mimage = new ArticyValueArticyObject();
        
        [SerializeField()]
        private ArticyValueArticyObject msfx = new ArticyValueArticyObject();
        
        [SerializeField()]
        private ArticyValueArticyObject mmusic = new ArticyValueArticyObject();
        
        [SerializeField()]
        private Boolean mpause = new Boolean();
        
        [SerializeField()]
        private Single mdelay;
        
        [SerializeField()]
        private String mtextColor;
        
        [SerializeField()]
        private UInt64 mOwnerId;
        
        [SerializeField()]
        private UInt32 mOwnerInstanceId;
        
        public String Unresolved_id
        {
            get
            {
                return mid;
            }
        }
        
        public String id
        {
            get
            {
                return Articy.Unity.ArticyTextExtension.Resolve(this, mid);
            }
            set
            {
                var oldValue = mid;
                mid = value;
                Articy.Unity.ArticyDatabase.ObjectNotifications.ReportChanged(OwnerId, OwnerInstanceId, "PhraseFeature.id", oldValue, mid);
            }
        }
        
        public ArticyObject image
        {
            get
            {
                return mimage.GetValue();
            }
            set
            {
                var oldValue = mimage;
                mimage.SetValue(value);
                Articy.Unity.ArticyDatabase.ObjectNotifications.ReportChanged(OwnerId, OwnerInstanceId, "PhraseFeature.image", oldValue.GetValue(), mimage.GetValue());
            }
        }
        
        public ArticyObject sfx
        {
            get
            {
                return msfx.GetValue();
            }
            set
            {
                var oldValue = msfx;
                msfx.SetValue(value);
                Articy.Unity.ArticyDatabase.ObjectNotifications.ReportChanged(OwnerId, OwnerInstanceId, "PhraseFeature.sfx", oldValue.GetValue(), msfx.GetValue());
            }
        }
        
        public ArticyObject music
        {
            get
            {
                return mmusic.GetValue();
            }
            set
            {
                var oldValue = mmusic;
                mmusic.SetValue(value);
                Articy.Unity.ArticyDatabase.ObjectNotifications.ReportChanged(OwnerId, OwnerInstanceId, "PhraseFeature.music", oldValue.GetValue(), mmusic.GetValue());
            }
        }
        
        public Boolean pause
        {
            get
            {
                return mpause;
            }
            set
            {
                var oldValue = mpause;
                mpause = value;
                Articy.Unity.ArticyDatabase.ObjectNotifications.ReportChanged(OwnerId, OwnerInstanceId, "PhraseFeature.pause", oldValue, mpause);
            }
        }
        
        public Single delay
        {
            get
            {
                return mdelay;
            }
            set
            {
                var oldValue = mdelay;
                mdelay = value;
                Articy.Unity.ArticyDatabase.ObjectNotifications.ReportChanged(OwnerId, OwnerInstanceId, "PhraseFeature.delay", oldValue, mdelay);
            }
        }
        
        public String Unresolved_textColor
        {
            get
            {
                return mtextColor;
            }
        }
        
        public String textColor
        {
            get
            {
                return Articy.Unity.ArticyTextExtension.Resolve(this, mtextColor);
            }
            set
            {
                var oldValue = mtextColor;
                mtextColor = value;
                Articy.Unity.ArticyDatabase.ObjectNotifications.ReportChanged(OwnerId, OwnerInstanceId, "PhraseFeature.textColor", oldValue, mtextColor);
            }
        }
        
        public UInt64 OwnerId
        {
            get
            {
                return mOwnerId;
            }
            set
            {
                mOwnerId = value;
            }
        }
        
        public UInt32 OwnerInstanceId
        {
            get
            {
                return mOwnerInstanceId;
            }
            set
            {
                mOwnerInstanceId = value;
            }
        }
        
        private void CloneProperties(object aClone, Articy.Unity.ArticyObject aFirstClassParent)
        {
            Articy.Test.Features.PhraseFeatureFeature newClone = ((Articy.Test.Features.PhraseFeatureFeature)(aClone));
            newClone.id = Unresolved_id;
            if ((mimage != null))
            {
                newClone.mimage = ((ArticyValueArticyObject)(mimage.CloneObject(newClone, aFirstClassParent)));
            }
            if ((msfx != null))
            {
                newClone.msfx = ((ArticyValueArticyObject)(msfx.CloneObject(newClone, aFirstClassParent)));
            }
            if ((mmusic != null))
            {
                newClone.mmusic = ((ArticyValueArticyObject)(mmusic.CloneObject(newClone, aFirstClassParent)));
            }
            newClone.pause = pause;
            newClone.delay = delay;
            newClone.textColor = Unresolved_textColor;
            newClone.OwnerId = OwnerId;
        }
        
        public object CloneObject(object aParent, Articy.Unity.ArticyObject aFirstClassParent)
        {
            Articy.Test.Features.PhraseFeatureFeature clone = new Articy.Test.Features.PhraseFeatureFeature();
            CloneProperties(clone, aFirstClassParent);
            return clone;
        }
        
        public virtual bool IsLocalizedPropertyOverwritten(string aProperty)
        {
            return false;
        }
        
        #region property provider interface
        public void setProp(string aProperty, object aValue)
        {
            if ((aProperty == "id"))
            {
                id = System.Convert.ToString(aValue);
                return;
            }
            if ((aProperty == "image"))
            {
                image = Articy.Unity.Interfaces.BaseScriptFragments.ObjectToModelRep(aValue);
                return;
            }
            if ((aProperty == "sfx"))
            {
                sfx = Articy.Unity.Interfaces.BaseScriptFragments.ObjectToModelRep(aValue);
                return;
            }
            if ((aProperty == "music"))
            {
                music = Articy.Unity.Interfaces.BaseScriptFragments.ObjectToModelRep(aValue);
                return;
            }
            if ((aProperty == "pause"))
            {
                pause = System.Convert.ToBoolean(aValue);
                return;
            }
            if ((aProperty == "delay"))
            {
                delay = System.Convert.ToSingle(aValue);
                return;
            }
            if ((aProperty == "textColor"))
            {
                textColor = System.Convert.ToString(aValue);
                return;
            }
        }
        
        public Articy.Unity.Interfaces.ScriptDataProxy getProp(string aProperty)
        {
            if ((aProperty == "id"))
            {
                return new Articy.Unity.Interfaces.ScriptDataProxy(id);
            }
            if ((aProperty == "image"))
            {
                return new Articy.Unity.Interfaces.ScriptDataProxy(image);
            }
            if ((aProperty == "sfx"))
            {
                return new Articy.Unity.Interfaces.ScriptDataProxy(sfx);
            }
            if ((aProperty == "music"))
            {
                return new Articy.Unity.Interfaces.ScriptDataProxy(music);
            }
            if ((aProperty == "pause"))
            {
                return new Articy.Unity.Interfaces.ScriptDataProxy(pause);
            }
            if ((aProperty == "delay"))
            {
                return new Articy.Unity.Interfaces.ScriptDataProxy(delay);
            }
            if ((aProperty == "textColor"))
            {
                return new Articy.Unity.Interfaces.ScriptDataProxy(textColor);
            }
            return null;
        }
        #endregion
    }
}
